# # server {
# # 	#listen 80 default_server;
# # 	listen [::]:80 default_server;

# # 	server_name _;

# #     add_header X-Frame-Options "SAMEORIGIN";
# #     add_header X-XSS-Protection "1; mode=block";
# #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

# # 	return 301 https://$host$request_uri;
# # }

# server {
#     listen 443 ssl;
#     server_name _;

#     ssl_certificate /etc/nginx/certs/fullchain1.crt;
#     ssl_certificate_key /etc/nginx/certs/privkey1.key;

#     add_header X-Frame-Options "SAMEORIGIN";
#     add_header X-XSS-Protection "1; mode=block";
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

#     # this is the internal Docker DNS, cache only for 30s
#     resolver 127.0.0.11 valid=30s;

#     location / {
#     	set $upstream_cancogen http://bentov2-web:3000;

# 	    proxy_pass    $upstream_cancogen;
#         error_log /var/log/bentov2_web_errors.log;
#     }

#     location ^~ /api {
	
#         set $upstream_meta http://bentov2-katsu:8000;

#         proxy_pass    $upstream_meta; 
#         error_log /var/log/bentov2_metadata_errors.log;
#     }   

#     # location ^~ /api/auth/sign-in {
	
#     #     set $upstream_meta http://bentov2-katsu:8000;

#     #     proxy_pass    $upstream_meta; 
#     #     error_log /var/log/bentov2_metadata_errors.log;
#     # } 
# }



#limit_req_zone $binary_remote_addr zone=external:10m rate=10r/s;

# server {
#     listen 443 ssl;
#     # root /chord/data/web/dist;



#     ssl_certificate /etc/nginx/certs/fullchain1.crt;
#     ssl_certificate_key /etc/nginx/certs/privkey1.key;

#     add_header X-Frame-Options "SAMEORIGIN";
#     add_header X-XSS-Protection "1; mode=block";
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;


#     # Enable to show debugging information in the error log:
#     # error_log /usr/local/openresty/nginx/logs/error.log debug;

#     # lua-resty-session configuration
#     # - use Redis for sessions to allow scaling of NGINX
#     set $session_cookie_lifetime 7200;
#     set $session_cookie_renew    900s;
#     set $session_storage         redis;
#     set $session_redis_prefix    oidc;
#     set $session_redis_socket    unix:///chord/tmp/redis.sock;

#     # CHORD constants (configuration file locations)
#     set $chord_auth_config     "{auth_config}";
#     set $chord_instance_config "{instance_config}";


#     # this is the internal Docker DNS, cache only for 30s
#     resolver 127.0.0.11 valid=30s;



#     # Head off any favicon requests before they pass through the auth flow
#     location = /favicon.ico {
#         return 404;
#         log_not_found off;
#         access_log off;
#     }

#     # # Serve up public files before they pass through the auth flow
#     # location /public/ {
#     #     alias /ingress/data/web/public/;
#     # }

#     # For the next few blocks, set up two-stage rate limiting:
#     #   Store:  10 MB worth of IP addresses (~160 000)
#     #   Rate:   10 requests per second.
#     #   Bursts: Allow for bursts of 15 with no delay and an additional 25
#     #          (total 40) queued requests before throwing up 503.
#     #   This limit is for requests from outside the DMZ; internal microservices
#     #   currently get unlimited access.
#     # See: https://www.nginx.com/blog/rate-limiting-nginx/

#     location / {
#         limit_req zone=external burst=40 delay=15;
#         access_by_lua_file /ingress/scripts/proxy_auth.lua;
#         #try_files $uri /index.html;

#         set $upstream_cancogen http://bentov2-web:3000;

# 	    proxy_pass    $upstream_cancogen;
#         error_log /var/log/bentov2_web_errors.log;

#     }

#     location = /api/node-info {
#         limit_req zone=external burst=40 delay=15;
#         content_by_lua_file /ingress/scripts/node_info.lua;
#     }

#     location /api/ {
#         limit_req zone=external burst=40 delay=15;
#         access_by_lua_file   /ingress/scripts/proxy_auth.lua;

#         # TODO: Deduplicate with below?

#         proxy_http_version   1.1;

#         proxy_pass_header    Server;
#         proxy_set_header     Upgrade           $http_upgrade;
#         proxy_set_header     Connection        "upgrade";
#         proxy_set_header     Host              $http_host;
#         proxy_set_header     X-Real-IP         $remote_addr;
#         proxy_set_header     X-Forwarded-For   $proxy_add_x_forwarded_for;
#         proxy_set_header     X-Forwarded-Proto $http_x_forwarded_proto;

#         # Clear X-CHORD-Internal header and set it to the "off" value (0)
#         proxy_set_header     X-CHORD-Internal  "0";

#         #proxy_pass           http://unix:/chord/tmp/nginx_internal.sock;

#         set $upstream_meta http://bentov2-katsu:8000;

#         proxy_pass    $upstream_meta; 
#         error_log /var/log/bentov2_metadata_errors.log;



#         client_body_timeout  660s;
#         proxy_read_timeout   660s;
#         proxy_send_timeout   660s;
#         send_timeout         660s;

#         client_max_body_size 200m;
#     }






#     # location ^~ /api/auth/sign-in {
	
#     #     set $upstream_meta http://bentov2-katsu:8000;

#     #     proxy_pass    $upstream_meta; 
#     #     error_log /var/log/bentov2_metadata_errors.log;
#     # } 
# }

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Use the Docker embedded DNS server
    resolver 127.0.0.11 ipv6=off;

    # Redirect all http to https
    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        server_name _;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        return 301 https://$host$request_uri;
    }

    # All https traffic
    server {
        listen 443 ssl;

        ssl_certificate /usr/local/openresty/nginx/certs/fullchain1.crt;
        ssl_certificate_key /usr/local/openresty/nginx/certs/privkey1.key;

        # CHORD constants (configuration file locations)
        set $chord_auth_config     "{auth_config}";
        set $chord_instance_config "{instance_config}";


        # BentoV2 Web
        location / {

            proxy_pass_header    Server;
            proxy_set_header     Upgrade           $http_upgrade;
            proxy_set_header     Connection        "upgrade";
            proxy_set_header     Host              $http_host;
            proxy_set_header     X-Real-IP         $remote_addr;
            proxy_set_header     X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header     X-Forwarded-Proto $http_x_forwarded_proto;

            set $request_url $request_uri;
            set $url $uri;

            #limit_req zone=external burst=40 delay=15;
            access_by_lua_file /usr/local/openresty/nginx/proxy_auth.lua;
            #try_files $uri /index.html;

            set $upstream_cancogen http://bentov2-web:3000;

            proxy_pass    $upstream_cancogen;
            error_log /var/log/bentov2_web_errors.log;

        }
    }
}