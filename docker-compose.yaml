version: '3.7'

#TODO: volumes

secrets:
  keycloak-admin-user:
    file: $PWD/tmp/secrets/keycloak-admin-user
  keycloak-admin-password:
    file: $PWD/tmp/secrets/keycloak-admin-password

  metadata-app-secret:
    file: $PWD/tmp/secrets/metadata-app-secret
  metadata-db-user:
    file: $PWD/tmp/secrets/metadata-db-user
  metadata-db-secret:
    file: $PWD/tmp/secrets/metadata-db-secret


services:
# -- web services
  gateway:
    build:
      context: $PWD/lib/gateway
      args:
        BASE_IMAGE: ${BENTOV2_GATEWAY_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_GATEWAY_BASE_IMAGE_VERSION}
    image: ${BENTOV2_GATEWAY_IMAGE}:${BENTOV2_GATEWAY_VERSION}
    container_name: ${BENTOV2_GATEWAY_CONTAINER_NAME}
    networks: 
      bridge-net:
        aliases:
          - ${BENTOV2_DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    volumes: 
      - ${BENTOV2_GATEWAY_CERTS_DIR}:${BENTOV2_GATEWAY_INTERNAL_CERTS_DIR}


  auth:
    image: ${BENTOV2_AUTH_IMAGE}:${BENTOV2_AUTH_VERSION}
    container_name: ${BENTOV2_AUTH_CONTAINER_NAME}
    command: ["-b", "${BENTOV2_AUTH_SERVICE_HOST}", "-Dkeycloak.migration.strategy=IGNORE_EXISTING"]
    expose:
      - ${BENTOV2_AUTH_INTERNAL_PORT}
    networks:
      - bridge-net
    volumes:
      - ${BENTOV2_AUTH_VOL_DIR}:/opt/jboss/keycloak/standalone/data
    environment: 
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_USER_FILE=/run/secrets/keycloak-admin-user
      - KEYCLOAK_PASSWORD_FILE=/run/secrets/keycloak-admin-password
    secrets:
      - source: keycloak-admin-user
        target: /run/secrets/keycloak-admin-user
      - source: keycloak-admin-password
        target: /run/secrets/keycloak-admin-password


  web:
    build:
      context: $PWD/lib/web
      args:
        BASE_IMAGE: ${BENTOV2_WEB_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_WEB_BASE_IMAGE_VERSION}
        BENTO_WEB_REPO: ${BENTO_WEB_REPO}
        BENTO_WEB_BRANCH: ${BENTO_WEB_BRANCH}
        BENTO_WEB_IS_DEBUG: "false"
        BENTO_WEB_USER: ${CURRENT_UID}
    image: ${BENTOV2_WEB_IMAGE}:${BENTOV2_WEB_VERSION}
    container_name: ${BENTOV2_WEB_CONTAINER_NAME}
    networks: 
      - bridge-net
    expose: 
      - ${BENTOV2_WEB_INTERNAL_PORT}
    # Execute npm build/install and watch, and 
    # nginx "listener" upon container startup
    entrypoint: sh /web/startup.sh


  katsu:
    build:
      context: $PWD/lib/katsu
      args:
        BASE_IMAGE:  ${BENTOV2_KATSU_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_KATSU_BASE_IMAGE_VERSION}
        KATSU_REPO: ${KATSU_REPO}
        KATSU_BRANCH: ${KATSU_BRANCH}
        KATSU_TAG: ${KATSU_TAG}
        BENTOV2_DOMAIN: ${BENTOV2_DOMAIN}
    image: ${BENTOV2_KATSU_IMAGE}:${BENTOV2_KATSU_VERSION}
    container_name: ${BENTOV2_KATSU_CONTAINER_NAME}
    expose:
      - ${BENTOV2_KATSU_INTERNAL_PORT}
    networks: 
      - bridge-net
    depends_on:
      - katsu-db
    environment:
      - CHORD_URL=${CHORD_METADATA_HOST}
      - CHORD_PERMISSIONS="${CHORD_METADATA_AUTH}"
      - CHORD_DEBUG="${CHORD_METADATA_DEBUG}"
      - POSTGRES_HOST=${BENTOV2_KATSU_DB_CONTAINER_NAME}
      - POSTGRES_USER=${BENTOV2_KATSU_DB_USER}
      - POSTGRES_PASSWORD=${BENTOV2_KATSU_DB_PASSWORD}
      - DRS_URL=http://${BENTOV2_DRS_CONTAINER_NAME}:${BENTOV2_DRS_INTERNAL_PORT}
      - SERVICE_TEMP=/app/tmp
      - DJANGO_SETTINGS_MODULE=chord_metadata_service.metadata.settings
    configs:
      - source: chord-metadata-settings
        target: /katsu/metadata/settings.py
        mode: 0644
    secrets:
      - source: metadata-app-secret
        target: metadata_app_secret
      - source: metadata-db-user
        target: metadata_db_user
      - source: metadata-db-secret
        target: metadata_db_secret
    entrypoint:
      - /bin/sh
      - -c
      - |
        python manage.py makemigrations
        python manage.py migrate
        gunicorn chord_metadata_service.metadata.wsgi:application -w 2 --threads 2 -b 0.0.0.0:${BENTOV2_KATSU_INTERNAL_PORT} 


  katsu-db:
    image: ${BENTOV2_KATSU_DB_IMAGE}:${BENTOV2_KATSU_DB_VERSION}
    container_name: ${BENTOV2_KATSU_DB_CONTAINER_NAME}
    networks: 
      - bridge-net
    environment:
      - POSTGRES_USER=${BENTOV2_KATSU_DB_USER}
      - POSTGRES_PASSWORD=${BENTOV2_KATSU_DB_PASSWORD}
      - POSTGRES_DB=${BENTOV2_KATSU_DB}
    expose:
      - 5432
    secrets:
      - source: metadata-db-user
        target: metadata_db_user
      - source: metadata-db-secret
        target: metadata_db_secret
    volumes: 
      - ${BENTOV2_KATSU_DB_VOL_DIR}:/var/lib/postgresql/data


  drop-box:
    build:
      context: $PWD/lib/drop-box
      args:
        BASE_IMAGE: ${BENTOV2_DROP_BOX_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_DROP_BOX_BASE_IMAGE_VERSION}
        REPO: ${BENTO_DROP_BOX_REPO}
        BRANCH: ${BENTO_DROP_BOX_BRANCH}
        TAG: ${BENTO_DROP_BOX_TAG}
    image: ${BENTOV2_DROP_BOX_IMAGE}:${BENTOV2_DROP_BOX_VERSION}
    container_name: ${BENTOV2_DROP_BOX_CONTAINER_NAME}
    environment: 
      # Runtime
      - FLASK_DEBUG=False
      - FLASK_APP=bento_drop_box_service.app
      # Storage
      # - MINIO_URL=${BENTOV2_DROP_BOX_MINIO_URL}
      # - MINIO_USERNAME=${BENTOV2_DROP_BOX_MINIO_USERNAME}
      # - MINIO_PASSWORD=${BENTOV2_DROP_BOX_MINIO_PASSWORD}
      # - MINIO_BUCKET=${BENTOV2_DROP_BOX_MINIO_BUCKET}
      - SERVICE_DATA=/data
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_DROP_BOX_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_DROP_BOX_VOL_DIR}:/data


  service-registry:
    build:
      context: $PWD/lib/service-registry
      args:
        BASE_IMAGE: ${BENTOV2_SERVICE_REGISTRY_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_SERVICE_REGISTRY_BASE_IMAGE_VERSION}
        REPO: ${BENTO_SERVICE_REGISTRY_REPO}
        BRANCH: ${BENTO_SERVICE_REGISTRY_BRANCH}
        TAG: ${BENTO_SERVICE_REGISTRY_TAG}
    image: ${BENTOV2_SERVICE_REGISTRY_IMAGE}:${BENTOV2_SERVICE_REGISTRY_VERSION}
    container_name: ${BENTOV2_SERVICE_REGISTRY_CONTAINER_NAME}
    environment: 
      # Runtime
      - FLASK_DEBUG=False
      - FLASK_APP=bento_service_registry.app

      # Following the chord_services.json schema
      # (https://github.com/c3g/chord_singularity/blob/master/chord_services.schema.json)
      # A list of services on a single domain which are registered in the service
      # registry instance.
      - CHORD_SERVICES=chord_services.json

      # Common URL base for all services
      - CHORD_URL=${BENTOV2_PUBLIC_URL}

      - CHORD_DEBUG=True

      # Timeout, in seconds (integers only), for contacting services from the JSON
      - CONTACT_TIMEOUT=1

      # Service ID for the /service-info endpoint
      - SERVICE_ID=ca.c3g.bento:${BENTOV2_SERVICE_REGISTRY_VERSION}

      # Python path template for the services, off of the CHORD_URL value
      # Currently only supports artifact-based paths
      - URL_PATH_FORMAT=api/{artifact}
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT}


  logging:
    build:
      context: $PWD/lib/logging
      args:
        BASE_IMAGE: ${BENTOV2_LOGGING_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_LOGGING_BASE_IMAGE_VERSION}
        REPO: ${BENTO_LOGGING_REPO}
        BRANCH: ${BENTO_LOGGING_BRANCH}
        TAG: ${BENTO_LOGGING_TAG}
    image: ${BENTOV2_LOGGING_IMAGE}:${BENTOV2_LOGGING_VERSION}
    container_name: ${BENTOV2_LOGGING_CONTAINER_NAME}
    environment: 
      # Runtime
      - FLASK_DEBUG=False
      - FLASK_APP=app
      - INTERNAL_PORT=${BENTOV2_LOGGING_INTERNAL_PORT}
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_LOGGING_INTERNAL_PORT}


  drs:
    build:
      context: $PWD/lib/drs
      args:
        BASE_IMAGE: ${BENTOV2_DRS_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_DRS_BASE_IMAGE_VERSION}
        REPO: ${BENTO_DRS_REPO}
        BRANCH: ${BENTO_DRS_BRANCH}
        TAG: ${BENTO_DRS_TAG}
    image: ${BENTOV2_DRS_IMAGE}:${BENTOV2_DRS_VERSION}
    container_name: ${BENTOV2_DRS_CONTAINER_NAME}
    environment: 
      # Runtime
      - FLASK_DEBUG=False
      - FLASK_APP=app
      - DATABASE=/drs/chord_drs/data/db/  # slightly confused naming, folder for database to go in
      - DATA=/drs/chord_drs/data/obj/  # DRS file objects, vs. the database
      - VARIANT_SERVICE_URL=http://${BENTOV2_VARIANT_CONTAINER_NAME}:${BENTOV2_VARIANT_INTERNAL_PORT}

    depends_on:
      - variant # wait for `variant` service to start so `drs`
                # service can ping variant service notifying it
                # can query for ingested variants upon startup 
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_DRS_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_DRS_VOL_DIR}:/drs/chord_drs/data
      - ${BENTOV2_WES_VOL_TMP_DIR}:/wes/tmp


  variant:
    build:
      context: $PWD/lib/variant
      args:
        BASE_IMAGE: ${BENTOV2_VARIANT_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_VARIANT_BASE_IMAGE_VERSION}
        REPO: ${BENTO_VARIANT_REPO}
        BRANCH: ${BENTO_VARIANT_BRANCH}
        TAG: ${BENTO_VARIANT_TAG}
        BCFTOOLS_VERSION: ${BENTOV2_VARIANT_BCFTOOLS_VERSION}
    image: ${BENTOV2_VARIANT_IMAGE}:${BENTOV2_VARIANT_VERSION}
    container_name: ${BENTOV2_VARIANT_CONTAINER_NAME}
    environment: 
      - FLASK_DEBUG=False
      - FLASK_APP=app

      - TABLE_MANAGER=${BENTOV2_VARIANT_TABLE_MANAGER}
      - DRS_URL=http://${BENTOV2_DRS_CONTAINER_NAME}:${BENTOV2_DRS_INTERNAL_PORT}
      - DRS_URL_BASE_PATH=${BENTOV2_VARIANT_DRS_URL_BASE_PATH}
      - INITIALIZE_IMMEDIATELY=${BENTOV2_VARIANT_INITIALIZE_IMMEDIATELY}
      - DATA=${BENTOV2_VARIANT_DATA}
      - CHORD_URL=${BENTOV2_VARIANT_CHORD_URL}

    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_VARIANT_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_VARIANT_VOL_DIR}:${BENTOV2_VARIANT_DATA}
      - ${BENTOV2_DRS_VOL_DIR}:/drs/chord_drs/data

  notification:
    build:
      context: $PWD/lib/notification
      args:
        BASE_IMAGE: ${BENTOV2_NOTIFICATION_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_NOTIFICATION_BASE_IMAGE_VERSION}
        REPO: ${BENTO_NOTIFICATION_REPO}
        BRANCH: ${BENTO_NOTIFICATION_BRANCH}
        TAG: ${BENTO_NOTIFICATION_TAG}
    image: ${BENTOV2_NOTIFICATION_IMAGE}:${BENTOV2_NOTIFICATION_VERSION}
    container_name: ${BENTOV2_NOTIFICATION_CONTAINER_NAME}
    environment: 
      - FLASK_DEBUG=False
      - FLASK_APP=app
      - DATABASE=/notification/data
      - REDIS_HOST=${BENTOV2_REDIS_CONTAINER_NAME}
      - REDIS_PORT=${BENTOV2_REDIS_INTERNAL_PORT}
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_NOTIFICATION_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_NOTIFICATION_VOL_DIR}:/notification/data



  federation:
    build:
      context: $PWD/lib/federation
      args:
        BASE_IMAGE: ${BENTOV2_FEDERATION_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_FEDERATION_BASE_IMAGE_VERSION}
        REPO: ${BENTO_FEDERATION_REPO}
        BRANCH: ${BENTO_FEDERATION_BRANCH}
        TAG: ${BENTO_FEDERATION_TAG}
    image: ${BENTOV2_FEDERATION_IMAGE}:${BENTOV2_FEDERATION_VERSION}
    container_name: ${BENTOV2_FEDERATION_CONTAINER_NAME}
    environment: 
      - DATABASE=/federation/data/federation.db
      - INITIALIZE_IMMEDIATELY=false
      - CHORD_DEBUG=false
      - BENTO_FEDERATION_MODE=true
      - CHORD_URL=${BENTOV2_PUBLIC_URL_TRAILING_SLASH}
      - CHORD_REGISTRY_URL=${BENTOV2_PUBLIC_URL}
      - OIDC_DISCOVERY_URI=${BENTOV2_AUTH_PUBLIC_URL}/auth/realms/${BENTOV2_AUTH_REALM}/.well-known/openid-configuration
      # PORT: Specified when running via ./run.py; defaults to 5000
      # SERVICE_URL_BASE_PATH: Base URL fragment (e.g. /test/) for endpoints
      # SOCKET: Specifies Unix socket location for production deployment

    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_FEDERATION_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_FEDERATION_VOL_DIR}:/federation/data


  event-relay:
    build:
      context: $PWD/lib/event-relay
      args:
        BASE_IMAGE: ${BENTOV2_EVENT_RELAY_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_EVENT_RELAY_BASE_IMAGE_VERSION}
        REPO: ${BENTO_EVENT_RELAY_REPO}
        BRANCH: ${BENTO_EVENT_RELAY_BRANCH}
        TAG: ${BENTO_EVENT_RELAY_TAG}
    image: ${BENTOV2_EVENT_RELAY_IMAGE}:${BENTOV2_EVENT_RELAY_VERSION}
    container_name: ${BENTOV2_EVENT_RELAY_CONTAINER_NAME}
    environment: 
      # If true, JSON_MESSAGES will parse all messages recieved from the subscription
      # and de-serialize them before passing them to the socket.io connection.
      # e.g. If the message {"test": true} is passed with JSON_MESSAGES on, the
      # corresponding socket.io message will be:
      # {"message": {"test": true}, "channel": "chord.something"}
      # Otherwise, the message will be:
      # {"message": "{\"test\": true}", "channel": "chord.something"}
      - JSON_MESSAGES="true" 

      # Default: blank, base path for the service-info endpoint
      # If blank, the service-info endpoint will be mounted on /service-info
      # If e.g. /base, the endpoint will be mounted on /base/service-info
      #- SERVICE_URL_BASE_PATH=

      # socket.io "path" for the server created by the service.
      - SOCKET_IO_PATH="${BENTOV2_EVENT_RELAY_SOCKET_IO_PATH}"

      # Connection string (URL or path to UNIX socket file) for the Redis instance.
      - REDIS_CONNECTION=redis://${BENTOV2_REDIS_CONTAINER_NAME}:${BENTOV2_REDIS_INTERNAL_PORT}

      # Subscription pattern the Redis PubSub connection. The default is configured
      # to be chord.* for the Bento platform, but it can be set to anything.
      # See https://redis.io/topics/pubsub and specifically the pattern-matching.
      - REDIS_SUBSCRIBE_PATTERN="chord.*"

      # Where the service will listen for requests. Can be a UNIX socket path or a
      # port number (e.g. 8080, which is the default value if nothing is set.)
      # Will also check the SERVICE_SOCKET environment variable for legacy reasons
      # related to the Bento platform.
      #- SERVICE_LISTEN_ON="/path/to/event_relay.sock"
    depends_on:
      - redis
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_EVENT_RELAY_INTERNAL_PORT}


  wes:
    build:
      context: $PWD/lib/wes
      args:
        BASE_IMAGE: ${BENTOV2_WES_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_WES_BASE_IMAGE_VERSION}
        REPO: ${BENTO_WES_REPO}
        BRANCH: ${BENTO_WES_BRANCH}
        TAG: ${BENTO_WES_TAG}
    image: ${BENTOV2_WES_IMAGE}:${BENTOV2_WES_VERSION}
    container_name: ${BENTOV2_WES_CONTAINER_NAME}
    environment: 
      - CHORD_SERVICES=/wes/chord_services.json
      - CHORD_URL=${BENTOV2_PUBLIC_URL_TRAILING_SLASH}
      - CELERY_RESULT_BACKEND=redis://${BENTOV2_REDIS_CONTAINER_NAME}:${BENTOV2_REDIS_INTERNAL_PORT}
      - CELERY_BROKER_URL=redis://${BENTOV2_REDIS_CONTAINER_NAME}:${BENTOV2_REDIS_INTERNAL_PORT}
      - DATABASE=/wes/data/bento_wes.db
      - SERVICE_ID=
      - SERVICE_TEMP=/wes/tmp
      - SERVICE_URL_BASE_PATH=/api/wes
      - WOM_TOOL_LOCATION=
      #/wes/womtool.jar
      # Allow-list (comma-separated) for hosts that workflow files can be downloaded
      # from - prevents possibly insecure WDLs from being ran
      - WORKFLOW_HOST_ALLOW_LIST=${BENTOV2_DOMAIN},${BENTOV2_VARIANT_CONTAINER_NAME}:${BENTOV2_VARIANT_INTERNAL_PORT},${BENTOV2_KATSU_CONTAINER_NAME}:${BENTOV2_KATSU_INTERNAL_PORT}

      # DRS configuration options:
      # - Where the DRS instance to use is located. Technically, if not set this 
      #   defaults to using a different environment variable, NGINX_INTERNAL_SOCKET,
      #   as a path to a Bento instance's internal NGINX UNIX socket and adding a 
      #   path to the actual DRS instance
      - DRS_URL=http://${BENTOV2_DRS_CONTAINER_NAME}:${BENTOV2_DRS_INTERNAL_PORT}
      - WRITE_OUTPUT_TO_DRS=True
      - DRS_DEDUPLICATE=True
      - DRS_SKIP_TYPES=
      - OTT_ENDPOINT_NAMESPACE=${BENTOV2_PUBLIC_URL}/api/auth/ott
      - FLASK_ENV=development
      - CHORD_DEBUG=True

    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_WES_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_WES_VOL_DIR}:/wes/data
      - ${BENTOV2_WES_VOL_TMP_DIR}:/wes/tmp
      - ${BENTOV2_DROP_BOX_VOL_DIR}:/data


  redis:
    image: ${BENTOV2_REDIS_BASE_IMAGE}:${BENTOV2_REDIS_BASE_IMAGE_VERSION}
    container_name: ${BENTOV2_REDIS_CONTAINER_NAME}
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_REDIS_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_REDIS_VOL_DIR}:/data

networks: 
  bridge-net:
    external: true