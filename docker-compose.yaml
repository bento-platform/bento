version: '3.7'

#TODO: volumes

secrets:
  keycloak-admin-user:
    file: $PWD/tmp/secrets/keycloak-admin-user
  keycloak-admin-password:
    file: $PWD/tmp/secrets/keycloak-admin-password

  metadata-app-secret:
    file: $PWD/tmp/secrets/metadata-app-secret
  metadata-db-user:
    file: $PWD/tmp/secrets/metadata-db-user
  metadata-db-secret:
    file: $PWD/tmp/secrets/metadata-db-secret


services:
# -- web services
  gateway:
    build:
      context: $PWD/lib/gateway
      args:
        BASE_IMAGE: ${BENTOV2_GATEWAY_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_GATEWAY_BASE_IMAGE_VERSION}
    image: ${BENTOV2_GATEWAY_IMAGE}:${BENTOV2_GATEWAY_VERSION}
    container_name: ${BENTOV2_GATEWAY_CONTAINER_NAME}
    environment: 
      - CHORD_DEBUG=false
      - CHORD_PERMISSIONS=true
      - CHORD_PRIVATE_MODE=${BENTOV2_PRIVATE_MODE}
      - CHORD_URL=${BENTOV2_PORTAL_PUBLIC_URL_TRAILING_SLASH}
      
      - OIDC_DISCOVERY_URI=${BENTOV2_AUTH_PUBLIC_URL}${BENTOV2_AUTH_WELLKNOWN_PATH}
      - REDIRECT_AFTER_LOGOUT_URI=${BENTOV2_AUTH_PUBLIC_URL}${BENTOV2_AUTH_REDIRECT_AFTER_LOGOUT_PATH}
      - CLIENT_ID=${BENTOV2_AUTH_CLIENT_ID}
      - TOKEN_ENDPOINT_AUTH_METHOD=client_secret_post
      - CLIENT_SECRET=${CLIENT_SECRET}
    networks: 
      bridge-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    volumes: 
      - ${BENTOV2_GATEWAY_CERTS_DIR}:${BENTOV2_GATEWAY_INTERNAL_CERTS_DIR}
    mem_limit: ${BENTOV2_GATEWAY_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_GATEWAY_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "curl", "https://localhost:443", "-k" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  auth:
    image: ${BENTOV2_AUTH_IMAGE}:${BENTOV2_AUTH_VERSION}
    container_name: ${BENTOV2_AUTH_CONTAINER_NAME}
    command: ["-b", "${BENTOV2_AUTH_SERVICE_HOST}", "-Dkeycloak.migration.strategy=IGNORE_EXISTING"]
    expose:
      - ${BENTOV2_AUTH_INTERNAL_PORT}
    networks:
      - bridge-net
    volumes:
      - ${BENTOV2_AUTH_VOL_DIR}:/opt/jboss/keycloak/standalone/data
    environment: 
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_USER_FILE=/run/secrets/keycloak-admin-user
      - KEYCLOAK_PASSWORD_FILE=/run/secrets/keycloak-admin-password
    secrets:
      - source: keycloak-admin-user
        target: /run/secrets/keycloak-admin-user
      - source: keycloak-admin-password
        target: /run/secrets/keycloak-admin-password
    mem_limit: ${BENTOV2_AUTH_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_AUTH_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "curl", "https://localhost:443", "-k" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  web:
    build:
      context: $PWD/lib/web
      args:
        BASE_IMAGE: ${BENTOV2_WEB_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_WEB_BASE_IMAGE_VERSION}
        BENTO_WEB_REPO: ${BENTO_WEB_REPO}
        BENTO_WEB_BRANCH: ${BENTO_WEB_BRANCH}
        BENTO_WEB_TAG: ${BENTO_WEB_TAG}
        BENTO_WEB_IS_DEBUG: "false"
        BENTO_WEB_USER: ${CURRENT_UID}
        BENTO_CUSTOM_HEADER: ${BENTO_WEB_CUSTOM_HEADER} # pass in at build time as an arg (becomes an client-side env)
    image: ${BENTOV2_WEB_IMAGE}:${BENTOV2_WEB_VERSION}
    container_name: ${BENTOV2_WEB_CONTAINER_NAME}
    networks: 
      - bridge-net
    expose: 
      - ${BENTOV2_WEB_INTERNAL_PORT}
    # Execute npm build/install and watch, and 
    # nginx "listener" upon container startup
    entrypoint: sh /web/startup.sh
    mem_limit: ${BENTOV2_WEB_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_WEB_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "wget", "-q0-", "http://localhost:${BENTOV2_WEB_INTERNAL_PORT}", "&&", "echo" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  katsu:
    build:
      context: $PWD/lib/katsu
      dockerfile: Dockerfile
    networks: 
      - bridge-net
    depends_on:
      - katsu-db
    extends:
      file: $PWD/lib/katsu/docker-compose.katsu.yaml
      service: katsu


  katsu-db:
    networks: 
      - bridge-net
    extends:
      file: $PWD/lib/katsu/docker-compose.katsu.yaml
      service: katsu-db


  drop-box:
    build:
      context: $PWD/lib/drop-box
      args:
        BASE_IMAGE: ${BENTOV2_DROP_BOX_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_DROP_BOX_BASE_IMAGE_VERSION}
        REPO: ${BENTO_DROP_BOX_REPO}
        BRANCH: ${BENTO_DROP_BOX_BRANCH}
        TAG: ${BENTO_DROP_BOX_TAG}
    image: ${BENTOV2_DROP_BOX_IMAGE}:${BENTOV2_DROP_BOX_VERSION}
    container_name: ${BENTOV2_DROP_BOX_CONTAINER_NAME}
    environment: 
      # Runtime
      - FLASK_DEBUG=False
      - FLASK_APP=bento_drop_box_service.app
      # Storage
      # - MINIO_URL=${BENTOV2_DROP_BOX_MINIO_URL}
      # - MINIO_USERNAME=${BENTOV2_DROP_BOX_MINIO_USERNAME}
      # - MINIO_PASSWORD=${BENTOV2_DROP_BOX_MINIO_PASSWORD}
      # - MINIO_BUCKET=${BENTOV2_DROP_BOX_MINIO_BUCKET}
      - SERVICE_DATA=/data
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_DROP_BOX_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_DROP_BOX_VOL_DIR}:/data
    mem_limit: ${BENTOV2_DROP_BOX_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_DROP_BOX_CPUS}
    cpu_shares: 1024
    healthcheck:
      test: [ "CMD", "curl", "https://localhost:${BENTOV2_DROP_BOX_INTERNAL_PORT}" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  service-registry:
    build:
      context: $PWD/lib/service-registry
      args:
        BASE_IMAGE: ${BENTOV2_SERVICE_REGISTRY_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_SERVICE_REGISTRY_BASE_IMAGE_VERSION}
        REPO: ${BENTO_SERVICE_REGISTRY_REPO}
        BRANCH: ${BENTO_SERVICE_REGISTRY_BRANCH}
        TAG: ${BENTO_SERVICE_REGISTRY_TAG}
    image: ${BENTOV2_SERVICE_REGISTRY_IMAGE}:${BENTOV2_SERVICE_REGISTRY_VERSION}
    container_name: ${BENTOV2_SERVICE_REGISTRY_CONTAINER_NAME}
    environment: 
      # Runtime
      - FLASK_DEBUG=False
      - FLASK_APP=bento_service_registry.app

      # Following the chord_services.json schema
      # (https://github.com/c3g/chord_singularity/blob/master/chord_services.schema.json)
      # A list of services on a single domain which are registered in the service
      # registry instance.
      - CHORD_SERVICES=chord_services.json

      # Common URL base for all services
      - CHORD_URL=${BENTOV2_PORTAL_PUBLIC_URL}

      - CHORD_DEBUG=True

      # Timeout, in seconds (integers only), for contacting services from the JSON
      - CONTACT_TIMEOUT=1

      # Service ID for the /service-info endpoint
      - SERVICE_ID=ca.c3g.bento:${BENTOV2_SERVICE_REGISTRY_VERSION}

      # Python path template for the services, off of the CHORD_URL value
      # Currently only supports artifact-based paths
      - URL_PATH_FORMAT=api/{artifact}

      - INTERNAL_PORT=${BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT}

    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT}
    mem_limit: ${BENTOV2_SERVICE_REGISTRY_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_SERVICE_REGISTRY_CPUS}
    cpu_shares: 256
    healthcheck:
      test: [ "CMD", "curl", "https://localhost:${BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT}" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  logging:
    build:
      context: $PWD/lib/logging
      args:
        BASE_IMAGE: ${BENTOV2_LOGGING_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_LOGGING_BASE_IMAGE_VERSION}
        REPO: ${BENTO_LOGGING_REPO}
        BRANCH: ${BENTO_LOGGING_BRANCH}
        TAG: ${BENTO_LOGGING_TAG}
    image: ${BENTOV2_LOGGING_IMAGE}:${BENTOV2_LOGGING_VERSION}
    container_name: ${BENTOV2_LOGGING_CONTAINER_NAME}
    environment: 
      # Runtime
      - FLASK_DEBUG=False
      - FLASK_APP=app
      - INTERNAL_PORT=${BENTOV2_LOGGING_INTERNAL_PORT}
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_LOGGING_INTERNAL_PORT}
    mem_limit: ${BENTOV2_LOGGING_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_LOGGING_CPUS}
    cpu_shares: 256
    healthcheck:
      test: [ "CMD", "curl", "https://localhost:${BENTOV2_LOGGING_INTERNAL_PORT}" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  drs:
    build:
      context: $PWD/lib/drs
      dockerfile: Dockerfile
    networks: 
      - bridge-net
    extends:
      file: $PWD/lib/drs/docker-compose.drs.yaml
      service: drs


  notification:
    build:
      context: $PWD/lib/notification
      args:
        BASE_IMAGE: ${BENTOV2_NOTIFICATION_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_NOTIFICATION_BASE_IMAGE_VERSION}
        REPO: ${BENTO_NOTIFICATION_REPO}
        BRANCH: ${BENTO_NOTIFICATION_BRANCH}
        TAG: ${BENTO_NOTIFICATION_TAG}
    image: ${BENTOV2_NOTIFICATION_IMAGE}:${BENTOV2_NOTIFICATION_VERSION}
    container_name: ${BENTOV2_NOTIFICATION_CONTAINER_NAME}
    environment: 
      - FLASK_DEBUG=False
      - FLASK_APP=app
      - DATABASE=/notification/data
      - REDIS_HOST=${BENTOV2_REDIS_CONTAINER_NAME}
      - REDIS_PORT=${BENTOV2_REDIS_INTERNAL_PORT}

      - INTERNAL_PORT=${BENTOV2_NOTIFICATION_INTERNAL_PORT}
    
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_NOTIFICATION_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_NOTIFICATION_VOL_DIR}:/notification/data
    mem_limit: ${BENTOV2_NOTIFICATION_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_NOTIFICATION_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "curl", "https://localhost:${BENTOV2_NOTIFICATION_INTERNAL_PORT}" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  federation:
    build:
      context: $PWD/lib/federation
      dockerfile: Dockerfile
    networks: 
      - bridge-net
    extends:
      file: $PWD/lib/federation/docker-compose.federation.yaml
      service: federation



  event-relay:
    build:
      context: $PWD/lib/event-relay
      args:
        BASE_IMAGE: ${BENTOV2_EVENT_RELAY_BASE_IMAGE}
        BASE_IMAGE_VERSION: ${BENTOV2_EVENT_RELAY_BASE_IMAGE_VERSION}
        REPO: ${BENTO_EVENT_RELAY_REPO}
        BRANCH: ${BENTO_EVENT_RELAY_BRANCH}
        TAG: ${BENTO_EVENT_RELAY_TAG}
    image: ${BENTOV2_EVENT_RELAY_IMAGE}:${BENTOV2_EVENT_RELAY_VERSION}
    container_name: ${BENTOV2_EVENT_RELAY_CONTAINER_NAME}
    environment: 
      # If true, JSON_MESSAGES will parse all messages recieved from the subscription
      # and de-serialize them before passing them to the socket.io connection.
      # e.g. If the message {"test": true} is passed with JSON_MESSAGES on, the
      # corresponding socket.io message will be:
      # {"message": {"test": true}, "channel": "chord.something"}
      # Otherwise, the message will be:
      # {"message": "{\"test\": true}", "channel": "chord.something"}
      - JSON_MESSAGES="true" 

      # Default: blank, base path for the service-info endpoint
      # If blank, the service-info endpoint will be mounted on /service-info
      # If e.g. /base, the endpoint will be mounted on /base/service-info
      #- SERVICE_URL_BASE_PATH=

      # socket.io "path" for the server created by the service.
      - SOCKET_IO_PATH="${BENTOV2_EVENT_RELAY_SOCKET_IO_PATH}"

      # Connection string (URL or path to UNIX socket file) for the Redis instance.
      - REDIS_CONNECTION=redis://${BENTOV2_REDIS_CONTAINER_NAME}:${BENTOV2_REDIS_INTERNAL_PORT}

      # Subscription pattern the Redis PubSub connection. The default is configured
      # to be chord.* for the Bento platform, but it can be set to anything.
      # See https://redis.io/topics/pubsub and specifically the pattern-matching.
      - REDIS_SUBSCRIBE_PATTERN="chord.*"

      # Where the service will listen for requests. Can be a UNIX socket path or a
      # port number (e.g. 8080, which is the default value if nothing is set.)
      # Will also check the SERVICE_SOCKET environment variable for legacy reasons
      # related to the Bento platform.
      #- SERVICE_LISTEN_ON="/path/to/event_relay.sock"
    depends_on:
      - redis
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_EVENT_RELAY_INTERNAL_PORT}
    mem_limit: ${BENTOV2_EVENT_RELAY_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_EVENT_RELAY_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "curl", "https://localhost:${BENTOV2_EVENT_RELAY_INTERNAL_PORT}" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  wes:
    build:
      context: $PWD/lib/wes
      dockerfile: Dockerfile
    networks: 
      - bridge-net
    extends:
      file: $PWD/lib/wes/docker-compose.wes.yaml
      service: wes


  redis:
    image: ${BENTOV2_REDIS_BASE_IMAGE}:${BENTOV2_REDIS_BASE_IMAGE_VERSION}
    container_name: ${BENTOV2_REDIS_CONTAINER_NAME}
    networks: 
      - bridge-net
    expose:
      - ${BENTOV2_REDIS_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_REDIS_VOL_DIR}:/data
    mem_limit: ${BENTOV2_REDIS_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_REDIS_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}

networks: 
  bridge-net:
    external: true