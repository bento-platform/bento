services:
# -- web services
  gateway:
    image: ${BENTOV2_GATEWAY_IMAGE}:${BENTOV2_GATEWAY_VERSION}
    container_name: ${BENTOV2_GATEWAY_CONTAINER_NAME}
    environment:
      - CHORD_DEBUG=false
      - CHORD_PERMISSIONS=true
      - CHORD_PRIVATE_MODE=${BENTOV2_PRIVATE_MODE}
      - CHORD_URL=${BENTOV2_PORTAL_PUBLIC_URL_TRAILING_SLASH}

      - OIDC_DISCOVERY_URI=${BENTOV2_AUTH_PUBLIC_URL}${BENTOV2_AUTH_WELLKNOWN_PATH}
      - REDIRECT_AFTER_LOGOUT_URI=${BENTOV2_AUTH_PUBLIC_URL}${BENTOV2_AUTH_REDIRECT_AFTER_LOGOUT_PATH}
      - CLIENT_ID=${BENTOV2_AUTH_CLIENT_ID}
      - TOKEN_ENDPOINT_AUTH_METHOD=client_secret_post
      - CLIENT_SECRET
      - BENTOV2_SESSION_SECRET

      - BENTOV2_AUTH_DOMAIN
      - BENTOV2_DOMAIN
      - BENTOV2_PORTAL_DOMAIN

      - BENTOV2_USE_EXTERNAL_IDP
      - BENTOV2_USE_BENTO_PUBLIC

      - BENTOV2_GATEWAY_CONTAINER_NAME
      - BENTOV2_GATEWAY_INTERNAL_CERTS_DIR
      - BENTOV2_GATEWAY_INTERNAL_PORTAL_FULLCHAIN_RELATIVE_PATH
      - BENTOV2_GATEWAY_INTERNAL_PORTAL_PRIVKEY_RELATIVE_PATH
      - BENTOV2_GATEWAY_INTERNAL_FULLCHAIN_RELATIVE_PATH
      - BENTOV2_GATEWAY_INTERNAL_PRIVKEY_RELATIVE_PATH
      - BENTOV2_GATEWAY_PUBLIC_ALLOW_FRAME_DOMAINS

      - BENTOV2_AUTH_CONTAINER_NAME
      - BENTOV2_AUTH_INTERNAL_PORT
      - BENTOV2_AUTH_FULLCHAIN_RELATIVE_PATH
      - BENTOV2_AUTH_PRIVKEY_RELATIVE_PATH

      - BENTOV2_DROP_BOX_CONTAINER_NAME
      - BENTOV2_DROP_BOX_INTERNAL_PORT
      - BENTOV2_SERVICE_REGISTRY_CONTAINER_NAME
      - BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT
      - BENTOV2_KATSU_CONTAINER_NAME
      - BENTOV2_KATSU_INTERNAL_PORT
      - BENTOV2_KATSU_DB_CONTAINER_NAME
      - BENTOV2_KATSU_DB_INTERNAL_PORT
      - BENTOV2_DRS_CONTAINER_NAME
      - BENTOV2_DRS_INTERNAL_PORT
      - BENTOV2_NOTIFICATION_CONTAINER_NAME
      - BENTOV2_NOTIFICATION_INTERNAL_PORT
      - BENTOV2_AGGREGATION_CONTAINER_NAME
      - BENTOV2_AGGREGATION_INTERNAL_PORT
      - BENTOV2_EVENT_RELAY_CONTAINER_NAME
      - BENTOV2_EVENT_RELAY_INTERNAL_PORT
      - BENTOV2_REDIS_CONTAINER_NAME
      - BENTOV2_REDIS_INTERNAL_PORT
      - BENTOV2_WES_CONTAINER_NAME
      - BENTOV2_WES_INTERNAL_PORT
      - BENTOV2_WEB_CONTAINER_NAME
      - BENTOV2_WEB_INTERNAL_PORT
      - BENTOV2_GOHAN_API_CONTAINER_NAME
      - BENTOV2_GOHAN_API_INTERNAL_PORT
      - BENTOV2_GOHAN_ES_CONTAINER_NAME
      - BENTOV2_GOHAN_ES_INTERNAL_PORT_1
      - BENTOV2_GOHAN_ES_INTERNAL_PORT_2
      - BENTO_PUBLIC_CONTAINER_NAME
      - BENTO_PUBLIC_INTERNAL_PORT
      - BENTO_BEACON_CONTAINER_NAME
      - BENTO_BEACON_INTERNAL_PORT
    networks:
      bridge-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    expose:
      - "80"
      - "443"
      - "444"
    volumes:
      - ${BENTOV2_CERTS_DIR}:${BENTOV2_GATEWAY_INTERNAL_CERTS_DIR}:ro
      - $PWD/lib/gateway/services:/gateway/services:ro
    mem_limit: ${BENTOV2_GATEWAY_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_GATEWAY_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "curl", "https://localhost:443", "-k" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  auth:
    image: ${BENTOV2_AUTH_IMAGE}:${BENTOV2_AUTH_VERSION}
    container_name: ${BENTOV2_AUTH_CONTAINER_NAME}
    command: ["--spi-login-protocol-openid-connect-legacy-logout-redirect-uri=true", "start"]
#    command: ["-b", "${BENTOV2_AUTH_SERVICE_HOST}", "-Dkeycloak.migration.strategy=IGNORE_EXISTING"]
    depends_on:
      - redis
    expose:
      - ${BENTOV2_AUTH_INTERNAL_PORT}
    networks:
      - bridge-net
    volumes:
      - ${BENTOV2_AUTH_VOL_DIR}:/opt/keycloak/data
      - ${PWD}/${BENTOV2_CERTS_DIR}/auth_fullchain1.crt:/run/secrets/keycloak-cert-file:ro
      - ${PWD}/${BENTOV2_CERTS_DIR}/auth_privkey1.key:/run/secrets/keycloak-cert-key-file:ro
    environment:
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME=${BENTOV2_AUTH_DOMAIN}
      - KEYCLOAK_ADMIN=${BENTOV2_AUTH_ADMIN_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${BENTOV2_AUTH_ADMIN_PASSWORD}
      - KC_HTTPS_CERTIFICATE_FILE=/run/secrets/keycloak-cert-file
      - KC_HTTPS_CERTIFICATE_KEY_FILE=/run/secrets/keycloak-cert-key-file
      - KC_HOSTNAME_STRICT=false
      - KC_PROXY=passthrough
    mem_limit: ${BENTOV2_AUTH_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_AUTH_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "curl", "https://localhost:8443", "-k" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  public:
    image: ${BENTO_PUBLIC_IMAGE}:${BENTO_PUBLIC_VERSION}
    container_name: ${BENTO_PUBLIC_CONTAINER_NAME}
    networks: 
      - bridge-net
    environment:
      - BENTO_PUBLIC_SERVICE_ID=${BENTO_PUBLIC_SERVICE_ID}
      - BENTO_PUBLIC_CLIENT_NAME=${BENTO_PUBLIC_CLIENT_NAME}
      - BENTO_PUBLIC_KATSU_URL=${BENTO_PUBLIC_KATSU_URL}
      - BENTO_PUBLIC_MAX_QUERY_PARAMETERS=${BENTO_PUBLIC_MAX_QUERY_PARAMETERS}
      - BENTO_PUBLIC_PORTAL_URL=${BENTO_PUBLIC_PORTAL_URL}
      - INTERNAL_PORT=${BENTO_PUBLIC_INTERNAL_PORT}
      - BENTO_PUBLIC_TRANSLATED=${BENTO_PUBLIC_TRANSLATED}
    expose:
      - "${BENTO_PUBLIC_INTERNAL_PORT}"
    volumes:
      - $PWD/lib/public/translations/en.json:/runner/www/public/locales/en/translation_en.json:ro
      - $PWD/lib/public/translations/fr.json:/runner/www/public/locales/fr/translation_fr.json:ro
      
      - $PWD/lib/public/about.html:/runner/www/public/about.html:ro
      - $PWD/lib/public/branding.png:/runner/www/public/assets/branding.png:ro


  web:
    image: ${BENTOV2_WEB_IMAGE}:${BENTOV2_WEB_VERSION}
    container_name: ${BENTOV2_WEB_CONTAINER_NAME}
    networks:
      - bridge-net
    expose:
      - ${BENTOV2_WEB_INTERNAL_PORT}
    environment:
      - BENTO_URL=${BENTOV2_PORTAL_PUBLIC_URL}
      - CUSTOM_HEADER=${BENTO_WEB_CUSTOM_HEADER}
    mem_limit: ${BENTOV2_WEB_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_WEB_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "wget", "-q0-", "http://localhost:${BENTOV2_WEB_INTERNAL_PORT}", "&&", "echo" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  katsu:
    networks:
      - bridge-net
    depends_on:
      - katsu-db
    extends:
      file: $PWD/lib/katsu/docker-compose.katsu.yaml
      service: katsu


  katsu-db:
    networks:
      - bridge-net
    extends:
      file: $PWD/lib/katsu/docker-compose.katsu.yaml
      service: katsu-db


  drop-box:
    image: ${BENTOV2_DROP_BOX_IMAGE}:${BENTOV2_DROP_BOX_VERSION}
    container_name: ${BENTOV2_DROP_BOX_CONTAINER_NAME}
    environment:
      # Runtime
      - FLASK_DEBUG=False
      - FLASK_APP=bento_drop_box_service.app
      # Storage
      # - MINIO_URL=${BENTOV2_DROP_BOX_MINIO_URL}
      # - MINIO_USERNAME=${BENTOV2_DROP_BOX_MINIO_USERNAME}
      # - MINIO_PASSWORD=${BENTOV2_DROP_BOX_MINIO_PASSWORD}
      # - MINIO_BUCKET=${BENTOV2_DROP_BOX_MINIO_BUCKET}
      - SERVICE_DATA=/data

      - SERVICE_URL=${BENTOV2_PORTAL_PUBLIC_URL}/api/drop-box
    networks:
      - bridge-net
    expose:
      - ${BENTOV2_DROP_BOX_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_DROP_BOX_VOL_DIR}:/data
    mem_limit: ${BENTOV2_DROP_BOX_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_DROP_BOX_CPUS}
    cpu_shares: 1024
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:${BENTOV2_DROP_BOX_INTERNAL_PORT}/service-info" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  service-registry:
    image: ${BENTOV2_SERVICE_REGISTRY_IMAGE}:${BENTOV2_SERVICE_REGISTRY_VERSION}
    container_name: ${BENTOV2_SERVICE_REGISTRY_CONTAINER_NAME}
    environment:
      # Following the revised bento_services.json schema
      # (see Python typing in bento_service_registry)
      # A list of services on a single domain which are registered in the service
      # registry instance.
      - BENTO_SERVICES=/bento_services.json

      # Common URL base for all services
      - BENTO_URL=${BENTOV2_PORTAL_PUBLIC_URL}

      # Variables for generating service URLs from URL templates found in bento_services.json
      - BENTO_PUBLIC_URL=${BENTOV2_PUBLIC_URL}
      - BENTO_PORTAL_PUBLIC_URL=${BENTOV2_PORTAL_PUBLIC_URL}

      - BENTO_DEBUG=False
      - BENTO_VALIDATE_SSL=False

      # Timeout, in seconds (integers only), for contacting services from the JSON
      - CONTACT_TIMEOUT=10

      # Service ID for the /service-info endpoint
      - SERVICE_ID=ca.c3g.bento:${BENTOV2_SERVICE_REGISTRY_VERSION}

      - INTERNAL_PORT=${BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT}
    networks:
      - bridge-net
    expose:
      - ${BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT}
    volumes:
      - $PWD/etc/bento_services.json:/bento_services.json:ro
    mem_limit: ${BENTOV2_SERVICE_REGISTRY_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_SERVICE_REGISTRY_CPUS}
    cpu_shares: 256
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:${BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT}/service-info" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  drs:
    networks:
      - bridge-net
    extends:
      file: $PWD/lib/drs/docker-compose.drs.yaml
      service: drs


  notification:
    image: ${BENTOV2_NOTIFICATION_IMAGE}:${BENTOV2_NOTIFICATION_VERSION}
    container_name: ${BENTOV2_NOTIFICATION_CONTAINER_NAME}
    environment:
      - FLASK_DEBUG=False
      - FLASK_APP=app
      - DATABASE=/notification/data
      - REDIS_HOST=${BENTOV2_REDIS_CONTAINER_NAME}
      - REDIS_PORT=${BENTOV2_REDIS_INTERNAL_PORT}

      - INTERNAL_PORT=${BENTOV2_NOTIFICATION_INTERNAL_PORT}

    networks:
      - bridge-net
    expose:
      - ${BENTOV2_NOTIFICATION_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_NOTIFICATION_VOL_DIR}:/notification/data
    mem_limit: ${BENTOV2_NOTIFICATION_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_NOTIFICATION_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:${BENTOV2_NOTIFICATION_INTERNAL_PORT}/service-info" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  aggregation:
    networks:
      - bridge-net
    extends:
      file: $PWD/lib/aggregation/docker-compose.aggregation.yaml
      service: aggregation



  event-relay:
    image: ${BENTOV2_EVENT_RELAY_IMAGE}:${BENTOV2_EVENT_RELAY_VERSION}
    container_name: ${BENTOV2_EVENT_RELAY_CONTAINER_NAME}
    environment:
      # Default to production NODE_ENV - shouldn't really change anything, though.
      - NODE_ENV=production

      # If true, JSON_MESSAGES will parse all messages recieved from the subscription
      # and de-serialize them before passing them to the socket.io connection.
      # e.g. If the message {"test": true} is passed with JSON_MESSAGES on, the
      # corresponding socket.io message will be:
      # {"message": {"test": true}, "channel": "chord.something"}
      # Otherwise, the message will be:
      # {"message": "{\"test\": true}", "channel": "chord.something"}
      - JSON_MESSAGES=true

      # socket.io "path" for the server created by the service.
      - SOCKET_IO_PATH=${BENTOV2_EVENT_RELAY_SOCKET_IO_PATH}

      # Connection string (URL or path to UNIX socket file) for the Redis instance.
      - REDIS_CONNECTION=redis://${BENTOV2_REDIS_CONTAINER_NAME}:${BENTOV2_REDIS_INTERNAL_PORT}

      # Subscription pattern the Redis PubSub connection. The default is configured
      # to be chord.* for the Bento platform, but it can be set to anything.
      # See https://redis.io/topics/pubsub and specifically the pattern-matching.
      - REDIS_SUBSCRIBE_PATTERN=bento.*

      # Where the service will listen for requests. Can be a UNIX socket path or a
      # port number (e.g. 8080, which is the default value if nothing is set.)
      # Will also check the SERVICE_SOCKET environment variable for legacy reasons
      # related to the Bento platform.
      # Use the standard Bento service internal port, overriding the default
      - SERVICE_LISTEN_ON=${BENTO_STD_SERVICE_INTERNAL_PORT}
    depends_on:
      - redis
    networks:
      - bridge-net
    expose:
      - ${BENTOV2_EVENT_RELAY_INTERNAL_PORT}
    mem_limit: ${BENTOV2_EVENT_RELAY_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_EVENT_RELAY_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:${BENTOV2_EVENT_RELAY_INTERNAL_PORT}/service-info" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}


  wes:
    networks:
      - bridge-net
    extends:
      file: $PWD/lib/wes/docker-compose.wes.yaml
      service: wes


  redis:
    image: ${BENTOV2_REDIS_BASE_IMAGE}:${BENTOV2_REDIS_BASE_IMAGE_VERSION}
    container_name: ${BENTOV2_REDIS_CONTAINER_NAME}
    networks:
      - bridge-net
    expose:
      - ${BENTOV2_REDIS_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_REDIS_VOL_DIR}:/data
    mem_limit: ${BENTOV2_REDIS_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_REDIS_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}
      retries: ${BENTOV2_HEALTHCHECK_RETRIES}

  beacon:
    networks: 
      - bridge-net
    extends:
      file: $PWD/lib/beacon/docker-compose.beacon.yaml
      service: beacon

  gohan-api:
    networks:
      - bridge-net
    mem_limit: ${BENTOV2_GOHAN_API_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_GOHAN_API_CPUS}
    cpu_shares: 1024
    image: ${BENTOV2_GOHAN_API_IMAGE}:${BENTOV2_GOHAN_API_VERSION}
    container_name: ${BENTOV2_GOHAN_API_CONTAINER_NAME}
    environment:
      # API
      - GOHAN_DEBUG=${BENTOV2_GOHAN_DEBUG}
      - GOHAN_SERVICE_CONTACT=${BENTOV2_GOHAN_SERVICE_CONTACT}
      - GOHAN_SEMVER=${BENTOV2_GOHAN_SEMVER}
      - GOHAN_API_INTERNAL_PORT=${BENTOV2_GOHAN_API_INTERNAL_PORT}
      - GOHAN_API_VCF_PATH=${BENTOV2_GOHAN_API_CONTAINERIZED_VCF_PATH}
      - GOHAN_API_GTF_PATH=${BENTOV2_GOHAN_API_CONTAINERIZED_GTF_PATH}
      - GOHAN_API_API_DRS_BRIDGE_DIR=${BENTOV2_GOHAN_API_API_DRS_BRIDGE_DIR_CONTAINERIZED}
      - GOHAN_API_BULK_INDEXING_CAP=${BENTOV2_GOHAN_API_BULK_INDEXING_CAP}
      - GOHAN_API_FILE_PROC_CONC_LVL=${BENTOV2_GOHAN_API_FILE_PROC_CONC_LVL}
      - GOHAN_API_LINE_PROC_CONC_LVL=${BENTOV2_GOHAN_API_LINE_PROC_CONC_LVL}

      # Elasticsearch
      - GOHAN_ES_URL=${BENTOV2_GOHAN_PRIVATE_ES_URL}
      - GOHAN_ES_USERNAME=${BENTOV2_GOHAN_ES_USERNAME}
      - GOHAN_ES_PASSWORD=${BENTOV2_GOHAN_ES_PASSWORD}

      # AuthX
      - GOHAN_AUTHZ_ENABLED=${BENTOV2_GOHAN_API_AUTHZ_ENABLED}
      - GOHAN_PUBLIC_AUTHN_JWKS_URL=${BENTOV2_GOHAN_PUBLIC_AUTHN_JWKS_URL:-}
      - GOHAN_PRIVATE_AUTHZ_URL=${BENTOV2_GOHAN_PRIVATE_AUTHZ_URL}
      - GOHAN_AUTHZ_REQHEADS=${BENTOV2_GOHAN_API_AUTHZ_REQHEADS}

      # DRS
      - GOHAN_DRS_URL=${BENTOV2_GOHAN_PRIVATE_DRS_URL}
      - GOHAN_DRS_BASIC_AUTH_USERNAME=${BENTOV2_GOHAN_DRS_BASIC_AUTH_USERNAME:-}
      - GOHAN_DRS_BASIC_AUTH_PASSWORD=${BENTOV2_GOHAN_DRS_BASIC_AUTH_PASSWORD:-}
      - GOHAN_DRS_API_DRS_BRIDGE_DIR=${BENTOV2_GOHAN_DRS_API_DRS_BRIDGE_DIR_CONTAINERIZED}
    volumes: 
      - ${BENTOV2_GOHAN_API_VCF_PATH}:${BENTOV2_GOHAN_API_CONTAINERIZED_VCF_PATH}
      - ${BENTOV2_GOHAN_API_GTF_PATH}:${BENTOV2_GOHAN_API_CONTAINERIZED_GTF_PATH}
      - ${BENTOV2_GOHAN_API_DRS_BRIDGE_HOST_DIR}:${BENTOV2_GOHAN_API_API_DRS_BRIDGE_DIR_CONTAINERIZED}
    expose:
      - ${BENTOV2_GOHAN_API_INTERNAL_PORT}
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:${BENTOV2_GOHAN_API_INTERNAL_PORT}/service-info" ]
      timeout: 5s
      interval: 1m
      retries: 3
    depends_on:
      - gohan-elasticsearch

  gohan-elasticsearch:
    image: ${BENTOV2_GOHAN_ES_IMAGE}:${BENTOV2_GOHAN_ES_VERSION}
    mem_limit: ${BENTOV2_GOHAN_ES_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_GOHAN_ES_CPUS}
    cpu_shares: 2048
    container_name: ${BENTOV2_GOHAN_ES_CONTAINER_NAME}
    networks:
      - bridge-net
    environment:
      - ELASTIC_USERNAME=${BENTOV2_GOHAN_ES_USERNAME}
      - ELASTIC_PASSWORD=${BENTOV2_GOHAN_ES_PASSWORD}
      - ${BENTOV2_GOHAN_ES_JAVA_OPTS}
      - xpack.security.enabled=true
      - discovery.type=${BENTOV2_GOHAN_ES_DISC_TYP}
    volumes: 
      - ${BENTOV2_GOHAN_ES_DATA_DIR}:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:${BENTOV2_GOHAN_ES_INTERNAL_PORT_1}" ]
      timeout: 5s
      interval: 1m
      retries: 3


networks:
  bridge-net:
    external: true
