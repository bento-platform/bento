services:
  gateway:
    image: ${BENTOV2_GATEWAY_IMAGE}:${BENTOV2_GATEWAY_VERSION}
    container_name: ${BENTOV2_GATEWAY_CONTAINER_NAME}
    environment:
      - BENTO_DEBUG=false

      - BENTO_AUTHZ_SERVICE_URL=${BENTO_AUTHZ_SERVICE_URL}
      - BENTOV2_SESSION_SECRET

      - BENTOV2_AUTH_DOMAIN
      - BENTOV2_DOMAIN
      - BENTOV2_PORTAL_DOMAIN
      - BENTOV2_CBIOPORTAL_DOMAIN

      # Feature flags:
      - BENTOV2_USE_EXTERNAL_IDP
      - BENTOV2_USE_BENTO_PUBLIC
      - BENTO_GATEWAY_USE_TLS
      - BENTO_BEACON_ENABLED
      - BENTO_CBIOPORTAL_ENABLED
      - BENTO_GOHAN_ENABLED

      - BENTOV2_GATEWAY_CONTAINER_NAME

      - BENTOV2_GATEWAY_INTERNAL_CERTS_DIR
      - BENTOV2_GATEWAY_INTERNAL_PORTAL_FULLCHAIN_RELATIVE_PATH
      - BENTOV2_GATEWAY_INTERNAL_PORTAL_PRIVKEY_RELATIVE_PATH
      - BENTOV2_GATEWAY_INTERNAL_FULLCHAIN_RELATIVE_PATH
      - BENTOV2_GATEWAY_INTERNAL_PRIVKEY_RELATIVE_PATH
      - BENTOV2_GATEWAY_INTERNAL_CBIOPORTAL_FULLCHAIN_RELATIVE_PATH
      - BENTOV2_GATEWAY_INTERNAL_CBIOPORTAL_PRIVKEY_RELATIVE_PATH

      - BENTOV2_GATEWAY_PUBLIC_ALLOW_FRAME_DOMAINS

      - BENTOV2_AUTH_CONTAINER_NAME
      - BENTOV2_AUTH_INTERNAL_PORT

      - BENTO_AUTHZ_CONTAINER_NAME
      - BENTO_AUTHZ_INTERNAL_PORT
      - BENTOV2_DROP_BOX_CONTAINER_NAME
      - BENTOV2_DROP_BOX_INTERNAL_PORT
      - BENTOV2_SERVICE_REGISTRY_CONTAINER_NAME
      - BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT
      - BENTOV2_KATSU_CONTAINER_NAME
      - BENTOV2_KATSU_INTERNAL_PORT
      - BENTOV2_KATSU_DB_CONTAINER_NAME
      - BENTOV2_KATSU_DB_INTERNAL_PORT
      - BENTOV2_DRS_CONTAINER_NAME
      - BENTOV2_DRS_INTERNAL_PORT
      - BENTOV2_NOTIFICATION_CONTAINER_NAME
      - BENTOV2_NOTIFICATION_INTERNAL_PORT
      - BENTOV2_AGGREGATION_CONTAINER_NAME
      - BENTOV2_AGGREGATION_INTERNAL_PORT
      - BENTOV2_EVENT_RELAY_CONTAINER_NAME
      - BENTOV2_EVENT_RELAY_INTERNAL_PORT
      - BENTO_REFERENCE_CONTAINER_NAME
      - BENTO_REFERENCE_INTERNAL_PORT
      - BENTOV2_WES_CONTAINER_NAME
      - BENTOV2_WES_INTERNAL_PORT
      - BENTOV2_WEB_CONTAINER_NAME
      - BENTOV2_WEB_INTERNAL_PORT
      - BENTOV2_GOHAN_API_CONTAINER_NAME
      - BENTOV2_GOHAN_API_INTERNAL_PORT
      - BENTOV2_GOHAN_ES_CONTAINER_NAME
      - BENTOV2_GOHAN_ES_INTERNAL_PORT_1
      - BENTOV2_GOHAN_ES_INTERNAL_PORT_2
      - BENTO_PUBLIC_CONTAINER_NAME
      - BENTO_PUBLIC_INTERNAL_PORT
      - BENTO_BEACON_CONTAINER_NAME
      - BENTO_BEACON_INTERNAL_PORT
      - BENTO_CBIOPORTAL_CONTAINER_NAME
      - BENTO_CBIOPORTAL_INTERNAL_PORT
    networks:
      aggregation-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      auth-net:
      authz-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      beacon-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      cbioportal-net:  # No aliases needed here; container for sure does not contact the gateway
      drop-box-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      drs-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      event-relay-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      gohan-api-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      katsu-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      notification-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      public-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      reference-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      service-registry-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      web-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
      wes-net:
        aliases:
          - ${BENTOV2_DOMAIN}
          - ${BENTOV2_PORTAL_DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    expose:
      - "80"
      - "443"
      - "444"
    volumes:
      - ${BENTOV2_GATEWAY_CERTS_DIR}:${BENTOV2_GATEWAY_INTERNAL_CERTS_DIR}:ro
      - ${PWD}/lib/gateway/services:/gateway/services:ro
      - ${PWD}/lib/gateway/public_services:/gateway/public_services:ro
    mem_limit: ${BENTOV2_GATEWAY_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_GATEWAY_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [
        "CMD",
        "curl", "-k",
        "--resolve", "${BENTOV2_PORTAL_DOMAIN}:443:127.0.0.1",
        "https://${BENTOV2_PORTAL_DOMAIN}"
      ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}


  # AUTH:
  # auth and auth-db included via extra compose file: lib/auth/docker-compose.auth.yaml

  # PUBLIC:
  # public included via extra compose file: lib/public/docker-compose.public.yaml


  authz:
    extends:
      file: $PWD/lib/authz/docker-compose.authz.yaml
      service: authz

  authz-db:
    extends:
      file: $PWD/lib/authz/docker-compose.authz.yaml
      service: authz-db


  web:
    extends:
      file: $PWD/lib/web/docker-compose.web.yaml
      service: web


  katsu:
    extends:
      file: $PWD/lib/katsu/docker-compose.katsu.yaml
      service: katsu

  katsu-db:
    extends:
      file: $PWD/lib/katsu/docker-compose.katsu.yaml
      service: katsu-db


  drop-box:
    image: ${BENTOV2_DROP_BOX_IMAGE}:${BENTOV2_DROP_BOX_VERSION}
    container_name: ${BENTOV2_DROP_BOX_CONTAINER_NAME}
    environment:
      - BENTO_UID
      - BENTO_DEBUG=False
      - SERVICE_DATA=${BENTO_DROP_BOX_FS_BASE_PATH}
      - SERVICE_URL=${BENTOV2_PUBLIC_URL}/api/drop-box
      - CORS_ORIGINS=${BENTO_CORS_ORIGINS}
      - BENTO_AUTHZ_SERVICE_URL
      - OPENID_CONFIG_URL=${BENTO_OPENID_CONFIG_URL}
    networks:
      - drop-box-net
    expose:
      - ${BENTOV2_DROP_BOX_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_DROP_BOX_VOL_DIR}:${BENTO_DROP_BOX_FS_BASE_PATH}
    mem_limit: ${BENTOV2_DROP_BOX_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_DROP_BOX_CPUS}
    cpu_shares: 1024
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:${BENTOV2_DROP_BOX_INTERNAL_PORT}/service-info" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}


  service-registry:
    image: ${BENTOV2_SERVICE_REGISTRY_IMAGE}:${BENTOV2_SERVICE_REGISTRY_VERSION}
    container_name: ${BENTOV2_SERVICE_REGISTRY_CONTAINER_NAME}
    environment:
      - BENTO_UID

      # Following the revised bento_services.json schema
      # (see Python typing in bento_service_registry)
      # A list of services on a single domain which are registered in the service
      # registry instance.
      - BENTO_SERVICES=/bento_services.json

      # Common URL base for all services
      - BENTO_URL=${BENTOV2_PORTAL_PUBLIC_URL}

      # Variables for generating service URLs from URL templates found in bento_services.json
      - BENTO_PUBLIC_URL=${BENTOV2_PUBLIC_URL}
      - BENTO_PORTAL_PUBLIC_URL=${BENTOV2_PORTAL_PUBLIC_URL}

      - BENTO_DEBUG=False
      - BENTO_VALIDATE_SSL=True
      - CORS_ORIGINS=${BENTO_CORS_ORIGINS}
      - BENTO_AUTHZ_SERVICE_URL

      # Timeout, in seconds (integers only), for contacting services from the JSON
      - CONTACT_TIMEOUT=10

      # Service ID for the /service-info endpoint
      - SERVICE_ID=ca.c3g.bento:${BENTOV2_SERVICE_REGISTRY_VERSION}

      - INTERNAL_PORT=${BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT}
    networks:
      - service-registry-net
    expose:
      - ${BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT}
    volumes:
      - $PWD/etc/bento_services.json:/bento_services.json:ro
    mem_limit: ${BENTOV2_SERVICE_REGISTRY_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_SERVICE_REGISTRY_CPUS}
    cpu_shares: 256
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:${BENTOV2_SERVICE_REGISTRY_INTERNAL_PORT}/service-info" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}


  drs:
    networks:
      - drs-net
    extends:
      file: $PWD/lib/drs/docker-compose.drs.yaml
      service: drs


  notification:
    image: ${BENTOV2_NOTIFICATION_IMAGE}:${BENTOV2_NOTIFICATION_VERSION}
    container_name: ${BENTOV2_NOTIFICATION_CONTAINER_NAME}
    environment:
      - BENTO_UID
      - FLASK_DEBUG=False
      - FLASK_APP=app
      - DATABASE=/notification/data
      - REDIS_HOST=${BENTOV2_REDIS_CONTAINER_NAME}
      - REDIS_PORT=${BENTOV2_REDIS_INTERNAL_PORT}
      - INTERNAL_PORT=${BENTOV2_NOTIFICATION_INTERNAL_PORT}
      - BENTO_AUTHZ_SERVICE_URL
      - CORS_ORIGINS=${BENTOV2_PUBLIC_URL};${BENTOV2_PORTAL_PUBLIC_URL}
    networks:
      - notification-net
      - redis-net  # For event pub/sub
    expose:
      - ${BENTOV2_NOTIFICATION_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_NOTIFICATION_VOL_DIR}:/notification/data
    mem_limit: ${BENTOV2_NOTIFICATION_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_NOTIFICATION_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:${BENTOV2_NOTIFICATION_INTERNAL_PORT}/service-info" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}


  aggregation:
    extends:
      file: $PWD/lib/aggregation/docker-compose.aggregation.yaml
      service: aggregation


  event-relay:
    image: ${BENTOV2_EVENT_RELAY_IMAGE}:${BENTOV2_EVENT_RELAY_VERSION}
    container_name: ${BENTOV2_EVENT_RELAY_CONTAINER_NAME}
    environment:
      # Default to production BENTO_DEBUG and NODE_ENV
      - BENTO_DEBUG=false
      - NODE_ENV=production

      # If true, JSON_MESSAGES will parse all messages recieved from the subscription
      # and de-serialize them before passing them to the socket.io connection.
      # e.g. If the message {"test": true} is passed with JSON_MESSAGES on, the
      # corresponding socket.io message will be:
      # {"message": {"test": true}, "channel": "chord.something"}
      # Otherwise, the message will be:
      # {"message": "{\"test\": true}", "channel": "chord.something"}
      - JSON_MESSAGES=true

      # socket.io "path" for the server created by the service.
      - SOCKET_IO_PATH=${BENTOV2_EVENT_RELAY_SOCKET_IO_PATH}

      # CORS origins for connecting to the socket
      - CORS_ORIGINS=${BENTOV2_PUBLIC_URL};${BENTOV2_PORTAL_PUBLIC_URL}

      # Connection string (URL or path to UNIX socket file) for the Redis instance.
      - REDIS_CONNECTION=redis://${BENTOV2_REDIS_CONTAINER_NAME}:${BENTOV2_REDIS_INTERNAL_PORT}

      # Subscription pattern the Redis PubSub connection. The default is configured
      # to be chord.* for the Bento platform, but it can be set to anything.
      # See https://redis.io/topics/pubsub and specifically the pattern-matching.
      - REDIS_SUBSCRIBE_PATTERN=bento.*

      # Where the service will listen for requests. Can be a UNIX socket path or a
      # port number (e.g. 8080, which is the default value if nothing is set.)
      # Will also check the SERVICE_SOCKET environment variable for legacy reasons
      # related to the Bento platform.
      # Use the standard Bento service internal port, overriding the default
      - SERVICE_LISTEN_ON=${BENTO_STD_SERVICE_INTERNAL_PORT}

      # Pass in authz service URL for authorizing socket connections
      - BENTO_AUTHZ_SERVICE_URL=${BENTO_AUTHZ_SERVICE_URL}
    depends_on:
      - redis
    networks:
      - event-relay-net
      - redis-net  # For event pub/sub
    expose:
      - ${BENTOV2_EVENT_RELAY_INTERNAL_PORT}
    mem_limit: ${BENTOV2_EVENT_RELAY_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_EVENT_RELAY_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:${BENTOV2_EVENT_RELAY_INTERNAL_PORT}/service-info" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: ${BENTOV2_HEALTHCHECK_INTERVAL}


  reference:
    extends:
      file: $PWD/lib/reference/docker-compose.reference.yaml
      service: reference

  reference-db:
    extends:
      file: $PWD/lib/reference/docker-compose.reference.yaml
      service: reference-db


  wes:
    extends:
      file: $PWD/lib/wes/docker-compose.wes.yaml
      service: wes


  redis:
    image: ${BENTOV2_REDIS_BASE_IMAGE}:${BENTOV2_REDIS_BASE_IMAGE_VERSION}
    container_name: ${BENTOV2_REDIS_CONTAINER_NAME}
    networks:
      - redis-net
    expose:
      - ${BENTOV2_REDIS_INTERNAL_PORT}
    volumes:
      - ${BENTOV2_REDIS_VOL_DIR}:/data
    mem_limit: ${BENTOV2_REDIS_MEM_LIM} # for mem_limit to work, make sure docker-compose is v2.4
    cpus: ${BENTOV2_REDIS_CPUS}
    cpu_shares: 512
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: ${BENTOV2_HEALTHCHECK_TIMEOUT}
      interval: 15s  # Faster interval for services which others may require to be healthy

  # BEACON:
  # beacon included via extra compose file: lib/beacon/docker-compose.beacon.yaml

  # GOHAN
  # gohan-api and gohan-elasticsearch included via extra compose file: lib/gohan/docker-compose.gohan.yaml

  # cBioPortal
  # `cbioportal` included via extra compose file: lib/cbioportal/docker-compose.cbioportal.yaml


# Lots of networks! Here, we have more or less one network per service, plus a few ones for databases
# (which don't even get exposed to the gateway) and some other extras.
#
# These are created by running ./bentoctl.bash init-docker ;
# the cBioPortal ones are only created if cBioPortal is enabled.
#
# The rationale behind this multi-network setup is that each service should, by default, not be able to talk to anything
# except what it *requires*. Databases should only be able to talk to the service which needs them and no one else, not
# even the gateway, since a database should never be publicly accessible.
#
# This is also sort of a quasi-self-documenting setup; if you only put services which need to talk together in the same
# network, you implicitly document the connections between said services.
#
# A concrete example: for the network katsu-net, the 'requirement for membership' is
#     'who needs to talk to katsu, without going through standard gateway/authentication procedures'?
# In this fashion, any other service put into katsu-net must have an important reason!

networks:
  aggregation-net:
    external: true
    name: ${BENTO_AGGREGATION_NETWORK}
  auth-net:
    external: true
    name: ${BENTO_AUTH_NETWORK}
  authz-net:
    external: true
    name: ${BENTO_AUTHZ_NETWORK}
  authz-db-net:
    external: true
    name: ${BENTO_AUTHZ_DB_NETWORK}
  beacon-net:
    external: true
    name: ${BENTO_BEACON_NETWORK}
  cbioportal-net:
    external: true
    name: ${BENTO_CBIOPORTAL_NETWORK}
  drop-box-net:
    external: true
    name: ${BENTO_DROP_BOX_NETWORK}
  drs-net:
    external: true
    name: ${BENTO_DRS_NETWORK}
  event-relay-net:
    external: true
    name: ${BENTO_EVENT_RELAY_NETWORK}
  gohan-api-net:
    external: true
    name: ${BENTO_GOHAN_API_NETWORK}
  gohan-es-net:
    external: true
    name: ${BENTO_GOHAN_ES_NETWORK}
  katsu-net:
    external: true
    name: ${BENTO_KATSU_NETWORK}
  katsu-db-net:
    external: true
    name: ${BENTO_KATSU_DB_NETWORK}
  notification-net:
    external: true
    name: ${BENTO_NOTIFICATION_NETWORK}
  public-net:
    external: true
    name: ${BENTO_PUBLIC_NETWORK}
  redis-net:
    external: true
    name: ${BENTO_REDIS_NETWORK}
  reference-net:
    external: true
    name: ${BENTO_REFERENCE_NETWORK}
  reference-db-net:
    external: true
    name: ${BENTO_REFERENCE_DB_NETWORK}
  service-registry-net:
    external: true
    name: ${BENTO_SERVICE_REGISTRY_NETWORK}
  web-net:
    external: true
    name: ${BENTO_WEB_NETWORK}
  wes-net:
    external: true
    name: ${BENTO_WES_NETWORK}
